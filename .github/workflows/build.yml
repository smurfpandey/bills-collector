name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub PostgreSQL image
        image: postgres:16.2-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bills_collector_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    env:
      TEST_DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/bills_collector_test
      SECRET_KEY: SOMETHING_SECRET_FOR_TEST
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          # Install a specific version of uv.
          version: "0.7.19"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        # run:  uv run pytest --cov --cov-report=xml
        run: echo "Skipping tests for now"

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    name: DockerBuild
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - uses: FranzDiebold/github-env-vars-action@v2.8.0
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/$GITHUB_REPOSITORY
          VERSION=$CI_SHA_SHORT
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ${TAGS}
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      - name: setup platform emulator
        uses: docker/setup-qemu-action@v3
      - name: setup multi-arch docker build
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
